#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Image

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device_choice:
        description: '选择型号(device-env.sh中的编号)'
        required: false
        default: 6
        type: number
      config_tag:
        description: '选择配置的版本(clean|basic|func|test)'
        required: false
        default: 'func'
      use_cache:
        description: '尝试使用缓存的tool和toolchain'
        required: false
        default: true
        type: boolean
      commit_sha:
        description: '使用指定的commit(可选)'
        required: false
        default: 'latest'
      ssh:
        description: '编译前进行SSH调试'
        required: false
        default: false
        type: boolean

env:
  # REPO_URL: https://github.com/openwrt/openwrt
  # REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  COMMIT_SHA: ${{ inputs.commit_sha }}
  DIY_P1_SH: diy-part1.sh
  # DIY_P2_SH: diy-part2/[OpenWrt]RE-SP-01B-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_TRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  init:
    runs-on: ubuntu-22.04
    outputs:
      DEVICE_TAG: ${{steps.job_tag.outputs.DEVICE_TAG}}
    steps:
    - uses: actions/checkout@main
    
    - name: Load environment variable
      run: |
        chmod +x $GITHUB_WORKSPACE/device-env.sh
        $GITHUB_WORKSPACE/device-env.sh ${{ inputs.device_choice }}
        
    - id: job_tag
      run: |
        # notifications
        echo "::set-output name=DEVICE_TAG::$DEVICE_TAG"
        echo "::notice title=Device Tag::${{ inputs.device_choice }}-$DEVICE_TAG with ${{ inputs.config_tag }} .config"
       
        # 若指定了 commit 提个醒
        if [ "$USE_COMMIT_SHA" == "latest" ]; then
          LATEST_SHA=$(curl "https://api.github.com/repos/$REPO_USE/commits/$REPO_BRANCH" | grep sha | head -n1 | cut -d\" -f4)
          echo "::notice title=Using commit::[latest] https://github.com/$REPO_USE/tree/$LATEST_SHA"
        else
          echo "::notice title=Using commit::[specific] https://github.com/$REPO_USE/tree/$USE_COMMIT_SHA"
        fi

  build:
    runs-on: ubuntu-22.04
    needs: init
    name: ${{needs.init.outputs.DEVICE_TAG}}
    steps:
    - uses: actions/checkout@main

    - name: Load Environment Variable
      run: |
        chmod +x $GITHUB_WORKSPACE/device-env.sh
        $GITHUB_WORKSPACE/device-env.sh ${{ inputs.device_choice }}

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $DEPENDS 
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        # docker image prune -a -f
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone Source Code
      working-directory: /workdir
      run: |
        df -hT $PWD

        git clone https://github.com/$REPO_USE -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

        # 若指定了 commit
        if [ "$USE_COMMIT_SHA" != "latest" ]; then
          cd openwrt
          git checkout "$USE_COMMIT_SHA"
          cd ..
        fi

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      if: ${{ inputs.use_cache }}
      with:
        ccache: 'false'
        prefix: ${{ github.workspace }}/openwrt
        
    - name: Load Custom Feeds
      run: |
      #  [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
      #  chmod +x $DIY_P1_SH
      #  cd openwrt
      #  $GITHUB_WORKSPACE/$DIY_P1_SH
      

    - name: Update Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install Feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
      #  [ -e files ] && echo '::notice title=Image Type:: 已启用files大法！' && mv -v files openwrt/files
      #  [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
      #  chmod +x "$DIY_P2_SH"
      #  cd openwrt
      #  # 使用脚本生成配置
      #  "$GITHUB_WORKSPACE/$DIY_P2_SH" ${{ inputs.config_tag }}
      #  echo ==============.config===============
      #  [ -e .config ] && cat .config || echo 'No .config after custom configuration'
      #  echo ====================================

    - name: Download Packages
      id: download
      run: |
        cd openwrt
        make defconfig

        cp $GITHUB_WORKSPACE/.config .
        echo  "33333333333333333333333"
        ls -lrt $GITHUB_WORKSPACE/.config
        ls -lrt 
        cat .config
        echo  "33333333333333333333333"
        # 下载包，如若出错生成警告
        # 一轮八线程
        make download -j8 | tee make_download.log
        grep 'ERROR:' make_download.log | xargs -i echo "::warning:: [Download Trial 1]" {}
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        # 二轮单线程
        grep 'ERROR:' -q -m1 make_download.log && make download -j1 V=s | tee make_download.log
        grep 'ERROR:' make_download.log | xargs -i echo "::warning:: [Download Trial 2]" {}
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: SSH Before Compile
      uses: mxschmitt/action-tmate@v3
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Compile
      id: compile
      run: |
        cd openwrt
        echo -e "Initiate initiate. Try $(($(nproc)+1)) thread first..."
        make -j $(($(nproc)+1)) || make -j1 || make -j1 V=s.
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        mv -v .config bin/targets/*/*

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory
      uses: actions/upload-artifact@main
      if: steps.compile.conclusion == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware Directory
      uses: actions/upload-artifact@main
      if: steps.organize.conclusion == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Delete Workflow Runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 30
        keep_minimum_runs: 5


